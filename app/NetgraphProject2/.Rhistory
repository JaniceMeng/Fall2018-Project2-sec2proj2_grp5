big
sorted_bigrams[1:80,2]
class(sorted_bigrams[1:80, 2])
big <- as.vector(sorted_bigrams[1:80, 1])
fr <- sorted_bigrams[1:80, 2]
g <- ggplot(top80_bigrams, aes(x = big, y = fr))
g + geom_bar()
as.matrix(top80_bigrams, nrow = 80, ncol = 2)
mattop80 <- as.matrix(sorted_bigrams[1:80, ])
mattop80
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
dftop80
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar()
g <- ggplot(dftop80, aes(x = big))
g + geom_bar()
g <- ggplot(dftop80, aes(x = big))
g + geom_bar(stat = "identity")
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity")
dftop80
big
sorted_bigrams[1:80, 1]
class(sorted_bigrams[1:80, 1])
big <- sorted_bigrams[1:80, 1]
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity")
g + geom_bar(stat = "identity")
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity")
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity")
+ ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 10, angle = 90, hjust = 1))
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity") + ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 10, angle = 90, hjust = 1))
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity") + ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 10, angle = 90))
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity") + ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 10, angle = 90, hjust = 1))
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity") + ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 10, angle = 90, hjust = 0.5))
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity") + ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 10, angle = 90, hjust = 1, vjust = 1))
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity") + ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 1))
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity") + ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity") + ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1))
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity") + ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1)) + coord_flip()
big <- sorted_bigrams[1:80, 1]
fr <- sorted_bigrams[1:80, 2]
dftop80 <- as.data.frame(sorted_bigrams[1:80, ])
g <- ggplot(dftop80, aes(x = big, y = fr))
g + geom_bar(stat = "identity") + ggtitle("Distribution of HappyDB Top 80 Bigrams") + xlab("Bigram") + ylab("Frequency") + theme(axis.text.x = element_text(size = 5, angle = 90, hjust = 1)) + coord_flip()
activities
activities
actdf <- cbind(activities[, 2], activities[, 4], activities[, 6])
actdf
actdf <- cbind(1:20, actdf)
actdf
colnames(actdf) <- c("Rank", "WatchFreq", "PlayFreq", "HomeFreq")
actdf
actdf <- melt(actdf, id.vars = "Rank")
library(reshape2)
actdf <- melt(actdf, id.vars = "Rank")
actdf
ggplot(actdf, aes(x = Rank, y = value, fill = variable)) +
geom_bar(stat = "identity")
actdf <- melt(actdf, id.var = "Rank")
actdf <- cbind(activities[, 2], activities[, 4], activities[, 6])
actdf <- cbind(1:20, actdf)
colnames(actdf) <- c("Rank", "WatchFreq", "PlayFreq", "HomeFreq")
actdf <- melt(actdf, id.var = "Rank")
ggplot(actdf, aes(x = Rank, y = value, fill = variable)) +
geom_bar(stat = "identity")
actdf <- cbind(activities[, 2], activities[, 4], activities[, 6])
actdf <- cbind(1:20, actdf)
colnames(actdf) <- c("Rank", "WatchFreq", "PlayFreq", "HomeFreq")
actdf <- melt(actdf)
actdf
ggplot(actdf, aes(x = Rank, y = value, fill = variable)) +
geom_bar(stat = "identity")
actdf <- actdf[-1:20, ]
actdf <- actdf[-1:20, ]
actdf <- actdf[-(1:20), ]
actdf
colnames(actdf) <- c("Rank", "FreqType", "Freq")
rownames(actdf) <- NULL
actdf
ggplot(actdf, aes(x = Rank, y = Freq, fill = FreqType)) +
geom_bar(stat = "identity")
ggplot(actdf, aes(x = Rank, y = Freq, fill = FreqType)) +
geom_bar(stat = "identity") +
scale_fill_discrete(name = "Frequency Type", labels = c("watch", "play", "home"))
ToothGrowth
knitr::opts_chunk$set(echo = TRUE)
tooth.vc <- ToothGrowth$len[ToothGrowth$supp == "VC"]
tooth.oj <- ToothGrowth$len[ToothGrowth$supp == "OJ"]
tooth.vc <- ToothGrowth$len[ToothGrowth$supp == "VC"]
tooth.oj <- ToothGrowth$len[ToothGrowth$supp == "OJ"]
t.test(tooth.vc, tooth.oj, var.equal = TRUE)
?t.test
t.test(tooth.vc, tooth.oj, var.equal = TRUE)$p.value
var.test(tooth.vc, tooth.oj)
wilcox.test(tooth.vc, tooth.oj)
ToothGrowth
?ToothGrowth
diffmed <- median(tooth.vc) - median(tooth.oj)
diffmed
library(bootstrap)
diffmed.samp <- bootstrap(tooth.vc, 1000, median)$thetastar -
bootstrap(tooth.oj, 1000, median)$thetastar
diffmed.samp
medquants <- quantile(diffmed.samp, probs = c(0.025, 0.975))
medquants
conf.interval.med <- c(diffmed - medquants[2], diffmed - medquants[1])
conf.interval.med
?var
# center of confidence interval
ratiovars <- var(tooth.vc) / var(tooth.oj) # ratio here is VC / OJ
ratiovars
# bootstrapped sample of possible variance ratios
ratiovars.samp <- bootstrap(tooth.vc, 1000, var)$thetastar /
bootstrap(tooth.oj, 1000, var)$thetastar
# computing quantiles from the above sample
rvquants <- quantile(ratiovars.samp, probs = c(0.025, 0.975))
conf.interval.vars <- c(ratiovars - rvquants[2], ratiovars - rvquants[1])
conf.interval.vars
conf.interval.med <- c(diffmed - medquants[2], diffmed - medquants[1])
conf.interval.med <- as.vector(conf.interval.med)
conf.interval.med
ln(conf.interval.vars)
?ln
??ln
?log
log(conf.interval.vars)
ratiovars / rvquants[1]
ratiovars / rvquants[2]
# center of confidence interval
ratiovars <- var(tooth.vc) / var(tooth.oj) # ratio here is VC / OJ
ratiovars
# bootstrapped sample of possible variance ratios
ratiovars.samp <- bootstrap(tooth.vc, 1000, var)$thetastar /
bootstrap(tooth.oj, 1000, var)$thetastar
# computing quantiles from the above sample
rvquants <- quantile(ratiovars.samp, probs = c(0.025, 0.975))
# computing confidence interval
conf.interval.vars <- c(ratiovars / rvquants[2], ratiovars / rvquants[1])
conf.interval.vars <- as.vector(conf.interval.vars)
conf.interval.vars
highlow <- ToothGrowth$len >= 20
highlow
toothy <- cbind(ToothGrowth, highlow)
colnames(toothy) <- c(colnames(ToothGrowth), "high")
toothy
class(toothy)
toothy[20:24, ]
high.oj <- tooth.oj >= 20
high.vc <- tooth.vc >= 20
ishigh <- c(high.vc / length(tooth.vc), high.oj / length(tooth.oj))
high.oj
high.vc
high.oj <- tooth.oj >= 20
high.vc <- tooth.vc >= 20
ishigh <- c(sum(high.vc) / length(tooth.vc), sum(high.oj) / length(tooth.oj))
sum(high.vc)
sum(high.oj)
/round
?round
ishigh[1]
ishigh[1]*100
round(ishigh[1]*100, digits = 2)
round(ishigh[1]*100, digits = 2)
30 * ishigh
highcount <- c(sum(high.vc), sum(high.oj))
n <- c(30, 30)
prop.test(highcount, n)
?prop.test
sum(high.oj)
ToothGrowth$dose
ToothGrowth
ToothGrowth[ToothGrowth$dose = 0.5, ]
ToothGrowth[ToothGrowth$dose == 0.5, ]
ToothGrowth[ToothGrowth$dose == 0.5 && ToothGrowth$supp == "VC", ]
ToothGrowth[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC", ]
ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC"]
x1 <- c(sum(tooth.vc.half >= 20), sum(tooth.oj.half >= 20))
tooth.vc.half <- ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC"]
tooth.vc.1 <- ToothGrowth$len[ToothGrowth$dose == 1.0 & ToothGrowth$supp == "VC"]
tooth.vc.2 <- ToothGrowth$len[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "VC"]
tooth.oj.half <- ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ"]
tooth.oj.1 <- ToothGrowth$len[ToothGrowth$dose == 1.0 & ToothGrowth$supp == "OJ"]
tooth.oj.2 <- ToothGrowth$len[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "OJ"]
x1 <- c(sum(tooth.vc.half >= 20), sum(tooth.oj.half >= 20))
n1 <- c(length(tooth.vc.half), length(tooth.oj.half))
prop.test(x1, n1)
x2 <- c(sum(tooth.vc.1 >= 20), sum(tooth.oj.1 >= 20))
n2 <- c(length(tooth.vc.1), length(tooth.oj.1))
prop.test(x2, n2)
x3 <- c(sum(tooth.vc.2 >= 20), sum(tooth.oj.2 >= 20))
n3 <- c(length(tooth.vc.2), length(tooth.oj.2))
prop.test(x3, n3)
?array
?matrix
highlowdose <- matrix(c(x1, n1 - x1, x2, n2 - x2, x3, n3 - x3), nrow = 2, ncol = 6)
highlowdose
rownames(highlowdose) <- c("VC", "OJ")
colnames(highlowdose) <- c("HighHalf","LowHalf", "High1", "Low1", "High2", "Low2")
highlowdose
unnnamed(highlowdose)
unname(highlowdose)
?array
array(highlowdose, c(2, 2, 3))
highlowdose
mantelhaen.test(array(highlowdose, c(2, 2, 3)))
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
birthwt
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
birthwt
?birthwt
fit <- lm(birthwt ~ age + lwt + factor(race) + factor(smoke) +
ptl + factor(ht) + factor(ui) + ftv, data = birthwt)
fit <- lm(bwt ~ age + lwt + factor(race) + factor(smoke) + ptl + factor(ht) + factor(ui) + ftv,
data = birthwt)
summary(fit)
?lm
?vif
??vif
library(car)
vif(fit)
?vif
sqrt(vif(fit)) > 2
?ifelse
race.binary <- ifelse(birthwt$race > 1, 1, 0)
race.binary
?matrix
matrix(data = c(race, race.binary), ncol = 2)
matrix(data = c(birthwt$race, race.binary), ncol = 2)
is.factor(race.binary)
lm(bwt ~ age + lwt + factor(race.binary) + factor(smoke) + ptl + factor(ht) + factor(ui) + ftv,
data = birthwt)
fit2 <- lm(bwt ~ age + lwt + factor(race.binary) + factor(smoke) + ptl + factor(ht) + factor(ui) + ftv, data = birthwt)
summary(fit2)
vif(fit2)
mean(vif(fit2))
mean(vif(fit1))
mean(vif(fit))
kappa(fit)
?glmnet
??glmnet
birthwt
birthwt[2:9]
?glmnet
library(glmnet)
?glmnet
y <- birthwt$bwt
x <- birthwt[2:9]
fit2 <- glmnet(x, y, alpha = 0)
type(x)
class(x)
class(y)
as.matrix(x)
class(as.matrix(x))
y <- birthwt$bwt
x <- as.matrix(birthwt[2:9])
fit2 <- glmnet(x, y, alpha = 0)
fit2
summary(fit2)
fit2$beta
?lm.ridge
lm.ridge(bwt ~ age + lwt + factor(race) + factor(smoke) + ptl + factor(ht) + factor(ui)
+ ftv, data = birthwt)
?l1ce
?lice
??lasso
formula <- bwt ~ age + lwt + factor(race) + factor(smoke) + ptl + factor(ht) + factor(ui) + ftv
fit2 <- lm.ridge(formula, data = birthwt)
fit2
summary(fit2)
fit2$lambda
?lm.ridge
summary(fit2)$coefficients
summary(fit2)$coef
fit$coefficients
matrix(fit$coefficients, fit2, ncol = 2)
fit2
class(fit2)
y <- birthwt$bwt
x <- as.matrix(birthwt[2:9])
fit2 <- glmnet(x, y, alpha = 0)
?glmnet
fit2$lambda
fit2$beta
dim(fit2$beta)
fit2$beta[,100]
fit$coefficients
?cv.glmnet
fit2 <- cv.glmnet(x, y, alpha = 0) # alpha = 0 => Ridge regression
fit2
plot(cv.fit)
plot(fit2)
?cv.glmnet
?glmnet
best.lambda <- fit2$lambda.min
best.lambda
formula
formula <- bwt ~ age + lwt + factor(race) + factor(smoke) + ptl + factor(ht) +
factor(ui) + ftv
fit2.ridge <- lm.ridge(formula, data = birthwt, lambda = best.lambda)
fit2.ridge
fit2.ridge$coef
class(fit2.ridge)
fit$coefficients
c(fit$coefficients, fit2.ridge)
?lm.ridge
fit2.ridge$Inter
fit$coefficients[-1]
coeffs <- matrix(c(fit$coefficients[-1], fit2.ridge$coef), ncol = 2)
coeffs
names(fit2.ridge$coef)
fit2.ridge$coef
rownames(coeffs) <- names(fit2.ridge$coef)
colnames(coeffs) <- c("OLS", "Ridge")
coeffs
?model.matrix
model.matrix(formula)
model.matrix(formula, data =  birthwt)
x.factor <- model.matrix(formula, data =  birthwt)
fit2.factor <- cv.glmnet(x.factor, y, alpha = 0)
fit2.factor$lambda.min
lm.ridge(formula, data = birthwt, lambda =  fit2.factor$lambda.min)
lam.seq <- 10^seq(10, -2, length = 100) # standard lambda sequence
fit.lasso <- cv.glmnet(x.factor, y, alpha = 1, lambda = lam.seq) # alpha = 1 => LASSO
fit.lasso
fit.lasso$lambda.min
?predict
predict(fit.lasso, type = "coefficients", s = fit.lasso$lambda.min)
?stepAIC
fit.step <- stepAIC(fit, direction = "both", trace = FALSE)
fit.step
summary(fit.step)
shiny::runApp('Sam's Folder/Columbia University/GR5243 Applied Data Science/Project 2/NetgraphProject2')
shiny::runApp('Sam's Folder/Columbia University/GR5243 Applied Data Science/Project 2/NetgraphProject2')
shiny::runApp('Sam's Folder/Columbia University/GR5243 Applied Data Science/Project 2/NetgraphProject2')
setwd("~/Sam's Folder/Columbia University/GR5243 Applied Data Science/Project 2/NetgraphProject2")
shiny::runApp()
?dashboardPage
runApp()
runApp()
runApp()
?strptime
runApp()
load("./data/citi_aug18.RData")
citibikes$starttime
rm(citibike)
rm(citibikes)
runApp()
runApp()
runApp()
runApp()
citi <- reactive({
day.select <- input$aug_day
time.select <- substr(times(input$aug_time / 24), 1, 5)
if(day.select[1] == day.select[2]) {
bikes <- citibikes[which(date == day.select[1] &
time.select[1] <= time &
time <= time.select[2]), ]
}
else {
bikes <- citibikes[which((date == day.select[1] & time >= time.select[1]) |
(date == day.select[2] & time <= time.select[2])), ]
}
return(bikes)
})
ct <- citi()
null.start <- ct$start.station.name == "NULL"
shiny::runApp(display.mode="showcase")
ct <- ct[-which(null.start), ]
options(shiny.reactlog=TRUE)
runApp()
runApp()
runApp()
?distHaversine
runApp()
distHaversine
?.pointsToMatrix
?".pointsToMatrix"
??".pointsToMatrix"
.pointsToMatrix
runApp()
distHaversine
distHaversine
?distHaversine
citibikes <- read.csv("201808-citibike-tripdata.csv", as.is = FALSE)
load("./data/citi_aug18.RData")
long1 <- citibikes$start.station.longitude[1:100]
lat1 <- citibikes$start.station.latitude[1:100]
long2 <- citibikes$end.station.longitude[1:100]
lat2 <- citibikes$end.station.latitude[1:100]
start <- cbind(long1, lat1)
end <- cbind(long2, lat2)
distHaversine(start, end)
?inherits
class(start)
class(end)
colnames(start)
colnames(end)
runApp()
runApp()
?na.omit
?distHaversine
?pointsToMatrix
inherits(start, "SpatialPoints")
?coordinates
distHaversine
start
start * pi/180
distHaversine
runApp()
head(start)
cat(file = stderr(), head(start))
cat(file = stderr(), dim(start))
runApp()
?cat
runApp()
runApp()
runApp()
runApp()
runApp()
stoptime <- citibikes$stoptime
time <- format(as.POSIXct(strptime(stoptime, "%F %H:%M:%OS", tz="")), format = "%H:%M")
date <- format(as.POSIXct(strptime(stoptime, "%F %H:%M:%OS", tz="")), format = "%F")
substr(times(0 / 24), 1, 5)
substr(times(1 / 24), 1, 5)
citibikes[which(date == "2018-08-01" & "00:00" <= time & time <= "01:00"), ]
tail(citibikes[which(date == "2018-08-01" & "00:00" <= time & time <= "01:00"), ])
dim(citibikes[which(date == "2018-08-01" & "00:00" <= time & time <= "01:00"), ])
?fitler
?filter
?filter
??filter
runApp()
?cat
runApp()
citibikes %>%
filter(Date == "2018-08-01") %>%
filter("00:00" <= Time & Time <= "01:00")
citibikes$Date <- date
citibikes$Time <- time
citibikes %>%
filter(Date == "2018-08-01") %>%
filter("00:00" <= Time & Time <= "01:00")
dim(citibikes %>%
filter(Date == day.select[1]) %>%
filter(time.select[1] <= Time & Time <= time.select[2]))
dim(citibikes %>%
filter(Date == "2018-08-01") %>%
filter("00:00" <= Time & Time <= "01:00"))
ct <- citibikes %>%
+     filter(Date == "2018-08-01") %>%
+     filter("00:00" <= Time & Time <= "01:00")
citibikes %>% filter(Date == "2018-08-01") %>% filter("00:00" <= Time & Time <= "01:00")
ct ><- citibikes %>% filter(Date == "2018-08-01") %>% filter("00:00" <= Time & Time <= "01:00")
ct <- citibikes %>% filter(Date == "2018-08-01") %>% filter("00:00" <= Time & Time <= "01:00")
ct[1,]
class(ct[1,])
runApp()
runApp()
class(Date)
class(citibikes$Date)
citibikes$Date
citibikes$Time
as.Date("2018-8-01")
ct$start.station.name == "NULL"
ct.default <- ct
ct.default$start.station.name == "NULL"
sum(ct.default$start.station.name == "NULL")
runApp()
